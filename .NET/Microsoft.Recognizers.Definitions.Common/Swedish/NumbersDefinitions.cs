//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//     Generation parameters:
//     - DataFilename: Patterns\Swedish\Swedish-Numbers.yaml
//     - Language: Swedish
//     - ClassName: NumbersDefinitions
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Recognizers.Definitions.Swedish
{
	using System;
	using System.Collections.Generic;

	public static class NumbersDefinitions
	{
		public const string LangMarker = @"Swe";
		public const string RoundNumberIntegerRegex = @"(hundra|tusen|miljon|miljoner|miljarder|miljard|biljon|biljoner)";
		public const string ZeroToNineIntegerRegex = @"(tre|sju|åtta|fyra|fem|noll|nio|nolla|ett|en|två|sex)";
		public const string NegativeNumberTermsRegex = @"((minus|negativ)\s+)";
		public static readonly string NegativeNumberSignRegex = $@"^{NegativeNumberTermsRegex}.*";
		public const string AnIntRegex = @"(en|ett)(?=\s)";
		public const string TenToNineteenIntegerRegex = @"(sjutton|tretton|fjorton|arton|nitton|femton|sexton|elva|tolv|tio)";
		public const string TensNumberIntegerRegex = @"(sjuttio|tjugo|trettio|åttio|nittio|fyrtio|femtio|sextio)";
		public static readonly string SeparaIntRegex = $@"((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}{ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\s*{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\s*{RoundNumberIntegerRegex})+))";
		public static readonly string AllIntRegex = $@"(((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}{ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|({ZeroToNineIntegerRegex}|{AnIntRegex}))?(\s*{RoundNumberIntegerRegex})))*{SeparaIntRegex})";
		public const string PlaceHolderPureNumber = @"\b";
		public const string PlaceHolderDefault = @"\D|\b";
		public static readonly Func<string, string> NumbersWithPlaceHolder = (placeholder) => $@"(((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!([\.,]\d+[a-zA-Z]))(?={placeholder})";
		public static readonly string NumbersWithSuffix = $@"(((?<!\d+\s*)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)";
		public static readonly string RoundNumberIntegerRegexWithLocks = $@"(?<=\b)\d+\s+{RoundNumberIntegerRegex}(?=\b)";
		public const string NumbersWithDozenSuffix = @"(((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dussin?(?=\b)";
		public static readonly string AllIntRegexWithLocks = $@"((?<=\b){AllIntRegex}(?=\b))";
		public static readonly string AllIntRegexWithDozenSuffixLocks = $@"(?<=\b)(((halvt\s+)?a\s+dussin)|({AllIntRegex}\s+dussin?))(?=\b)";
		public const string RoundNumberOrdinalRegex = @"(hundrade|tusende|miljonte|miljardte|biljonte)";
		public const string NumberOrdinalRegex = @"(först(e|a)|andr(a|e)|tredje|fjärde|femte|sjätte|sjunde|åttonde|nionde|tionde|elfte|tolfte|trettonde|fjortonde|femtonde|sextonde|sjuttonde|artonde|nittonde|tjugonde|trettionde|fyrtionde|femtionde|sextionde|sjuttionde|åttionde|nittionde)";
		public const string RelativeOrdinalRegex = @"((näst(a|e)|föregående)|näst sist(a|e)|sist(a|e))";
		public static readonly string BasicOrdinalRegex = $@"({NumberOrdinalRegex}|{RelativeOrdinalRegex})";
		public static readonly string SuffixBasicOrdinalRegex = $@"((((({TensNumberIntegerRegex}(\s+(och\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(och\s+)?)*({TensNumberIntegerRegex}(\s+|\s*-\s*))?{BasicOrdinalRegex})";
		public static readonly string SuffixRoundNumberOrdinalRegex = $@"(({AllIntRegex}\s+){RoundNumberOrdinalRegex})";
		public static readonly string AllOrdinalRegex = $@"({SuffixBasicOrdinalRegex}|{SuffixRoundNumberOrdinalRegex})";
		public const string OrdinalSuffixRegex = @"(?<=\b)((\d*(1:(e|a)|2:(a|e)|3:e|4:e|5:e|6:e|7:e|8:e|9:e|0:e))|(11:e|12:e))(?=\b)";
		public const string OrdinalNumericRegex = @"(?<=\b)(\d{1,3}(\s*,\s*\d{3})*\s*(:(e|a)))(?=\b)";
		public static readonly string OrdinalRoundNumberRegex = $@"(?<!(en|ett)\s+){RoundNumberOrdinalRegex}";
		public static readonly string OrdinalSwedishRegex = $@"(?<=\b){AllOrdinalRegex}(?=\b)";
		public const string FractionNotationWithSpacesRegex = @"(((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))";
		public const string FractionNotationRegex = @"(((?<=\W|^)-\s*)|(?<![/-])(?<=\b))\d+[/]\d+(?=(\b[^/]|$))";
		public static readonly string FractionNounRegex = $@"(?<=\b)({AllIntRegex}\s+(och\s+)?)?({AllIntRegex})(\s+|\s*-\s*)((({AllOrdinalRegex})|({RoundNumberOrdinalRegex}))|halvor|kvartar)(?=\b)";
		public static readonly string FractionNounWithArticleRegex = $@"(?<=\b)({AllIntRegex}\s+(och\s+)?)?(en|ett)(\s+|\s*-\s*)(?!\bförsta\b|\bandra\b)(({AllOrdinalRegex})|({RoundNumberOrdinalRegex})|halvan|kvarten)(?=\b)";
		public static readonly string FractionPrepositionRegex = $@"(?<=\b)(?<numerator>({AllIntRegex})|((?<![\.,])\d+))\s+(över|i|ut\s+av)\s+(?<denominator>({AllIntRegex})|(\d+)(?![\.,]))(?=\b)";
		public static readonly string FractionPrepositionWithinPercentModeRegex = $@"(?<=\b)(?<numerator>({AllIntRegex})|((?<![\.,])\d+))\s+över\s+(?<denominator>({AllIntRegex})|(\d+)(?![\.,]))(?=\b)";
		public static readonly string AllPointRegex = $@"((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))";
		public static readonly string AllFloatRegex = $@"{AllIntRegex}(\s+komma){AllPointRegex}";
		public static readonly string DoubleWithMultiplierRegex = $@"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)";
		public const string DoubleExponentialNotationRegex = @"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)e([+-]*[1-9]\d*)(?=\b)";
		public const string DoubleCaretExponentialNotationRegex = @"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)\^([+-]*[1-9]\d*)(?=\b)";
		public static readonly Func<string, string> DoubleDecimalPointRegex = (placeholder) => $@"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+(?!([\.,]\d+))(?={placeholder})";
		public static readonly Func<string, string> DoubleWithoutIntegralRegex = (placeholder) => $@"(?<=\s|^)(?<!(\d+))[\.,]\d+(?!([\.,]\d+))(?={placeholder})";
		public static readonly string DoubleWithRoundNumber = $@"(((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s+{RoundNumberIntegerRegex}(?=\b)";
		public static readonly string DoubleAllFloatRegex = $@"((?<=\b){AllFloatRegex}(?=\b))";
		public const string ConnectorRegex = @"(?<spacer>och)";
		public static readonly string NumberWithSuffixPercentage = $@"(?<!%)({BaseNumbers.NumberReplaceToken})(\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(procent|proc|procentandel)\b)";
		public static readonly string FractionNumberWithSuffixPercentage = $@"(({BaseNumbers.FractionNumberReplaceToken})\s+av)";
		public static readonly string NumberWithPrefixPercentage = $@"(procent av|proc av)(\s*)({BaseNumbers.NumberReplaceToken})";
		public static readonly string NumberWithPrepositionPercentage = $@"({BaseNumbers.NumberReplaceToken})\s*(i|ut\s+av)\s*({BaseNumbers.NumberReplaceToken})";
		public const string TillRegex = @"(till|--|-|—|——|~|–)";
		public const string MoreRegex = @"((större|fler|mer|högre|större)(\s+än)?|ovanför|över|(?<!<|=)>)";
		public const string LessRegex = @"((mindre|färre|lägre)(\s+än)?|under|(?<!>|=)<)";
		public const string EqualRegex = @"(lik(nar|nande)?(\s+(som))?|(?<!<|>)=)";
		public static readonly string MoreOrEqualPrefix = $@"(((ej|inte)\s+{LessRegex})|(åtminstone))";
		public static readonly string MoreOrEqual = $@"(({MoreRegex}\s+(eller)?\s+{EqualRegex})|({EqualRegex}\s+(eller)?\s+{MoreRegex})|{MoreOrEqualPrefix}(\s+(eller)?\s+{EqualRegex})?|({EqualRegex}\s+(eller)?\s+)?{MoreOrEqualPrefix}|>\s*=)";
		public const string MoreOrEqualSuffix = @"((och|eller)\s+(större|fler|mer|högre)((?!\s+än)|(\s+än(?!(\s*\d+)))))";
		public static readonly string LessOrEqualPrefix = $@"(((ej|inte)\s+{MoreRegex})|(som\s+mest))";
		public static readonly string LessOrEqual = $@"(({LessRegex}\s+(eller)?\s+{EqualRegex})|({EqualRegex}\s+(eller)?\s+{LessRegex})|{LessOrEqualPrefix}(\s+(eller)?\s+{EqualRegex})?|({EqualRegex}\s+(eller)?\s+)?{LessOrEqualPrefix}|<\s*=)";
		public const string LessOrEqualSuffix = @"((och|eller)\s+(mindre|färre|lägre)((?!\s+än)|(\s+än(?!(\s*\d+)))))";
		public const string NumberSplitMark = @"(?![,.](?!\d+))";
		public const string MoreRegexNoNumberSucceed = @"((större|fler|mer|högre)((?!\s+än)|\s+(än(?!(\s*\d+))))|(ovanför|över)(?!(\s*\d+)))";
		public const string LessRegexNoNumberSucceed = @"((mindre|färre|lägre)((?!\s+än)|\s+(än(?!(\s*\d+))))|(nedanför|under)(?!(\s*\d+)))";
		public const string EqualRegexNoNumberSucceed = @"(lik(nar|nande)?((?!\s+(som))|(\s+(som)(?!(\s*\d+)))))";
		public static readonly string OneNumberRangeMoreRegex1 = $@"({MoreOrEqual}|{MoreRegex})\s*(som\s+)?(?<number1>({NumberSplitMark}.)+)";
		public static readonly string OneNumberRangeMoreRegex2 = $@"(?<number1>({NumberSplitMark}.)+)\s*{MoreOrEqualSuffix}";
		public static readonly string OneNumberRangeMoreSeparateRegex = $@"({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){EqualRegexNoNumberSucceed})";
		public static readonly string OneNumberRangeLessRegex1 = $@"({LessOrEqual}|{LessRegex})\s*(som\s+)?(?<number2>({NumberSplitMark}.)+)";
		public static readonly string OneNumberRangeLessRegex2 = $@"(?<number2>({NumberSplitMark}.)+)\s*{LessOrEqualSuffix}";
		public static readonly string OneNumberRangeLessSeparateRegex = $@"({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){LessRegexNoNumberSucceed})|({LessRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){EqualRegexNoNumberSucceed})";
		public static readonly string OneNumberRangeEqualRegex = $@"{EqualRegex}\s*(som\s+)?(?<number1>({NumberSplitMark}.)+)";
		public static readonly string TwoNumberRangeRegex1 = $@"mellan\s*(?<number1>({NumberSplitMark}.)+)\s*och\s*(?<number2>({NumberSplitMark}.)+)";
		public static readonly string TwoNumberRangeRegex2 = $@"({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\s*(och|men|,)\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})";
		public static readonly string TwoNumberRangeRegex3 = $@"({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\s*(och|men|,)\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})";
		public static readonly string TwoNumberRangeRegex4 = $@"(från\s+)?(?<number1>({NumberSplitMark}(?!\bfrån\b).)+)\s*{TillRegex}\s*(?<number2>({NumberSplitMark}.)+)";
		public const string AmbiguousFractionConnectorsRegex = @"(\bin\b)";
		public const char DecimalSeparatorChar = ',';
		public const string FractionMarkerToken = @"av";
		public const char NonDecimalSeparatorChar = '.';
		public const string HalfADozenText = @"sex";
		public const string WordSeparatorToken = @"och";
		public static readonly string[] WrittenDecimalSeparatorTexts = { @"komma" };
		public static readonly string[] WrittenGroupSeparatorTexts = { @"punkt" };
		public static readonly string[] WrittenIntegerSeparatorTexts = { @"och" };
		public static readonly string[] WrittenFractionSeparatorTexts = { @"och" };
		public const string HalfADozenRegex = @"(ett\s+)?halvt\s+dussin";
		public static readonly string DigitalNumberRegex = $@"((?<=\b)(hundra|tusen|miljon|miljoner|miljard|miljarder|biljarder|dussin)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))";
		public static readonly Dictionary<string, long> CardinalNumberMap = new Dictionary<string, long>
		{
			{ @"ingen", 0 },
			{ @"inga", 0 },
			{ @"noll", 0 },
			{ @"en", 1 },
			{ @"ett", 1 },
			{ @"två", 2 },
			{ @"tre", 3 },
			{ @"fyra", 4 },
			{ @"fem", 5 },
			{ @"sex", 6 },
			{ @"sju", 7 },
			{ @"åtta", 8 },
			{ @"nio", 9 },
			{ @"tio", 10 },
			{ @"elva", 11 },
			{ @"tolv", 12 },
			{ @"dussin", 12 },
			{ @"dussintal", 12 },
			{ @"dussintals", 12 },
			{ @"tretton", 13 },
			{ @"fjorton", 14 },
			{ @"femton", 15 },
			{ @"sexton", 16 },
			{ @"sjutton", 17 },
			{ @"arton", 18 },
			{ @"nitton", 19 },
			{ @"tjugo", 20 },
			{ @"tjog", 20 },
			{ @"tjogvis", 20 },
			{ @"trettio", 30 },
			{ @"tretti", 30 },
			{ @"fyrtio", 40 },
			{ @"femtio", 50 },
			{ @"sextio", 60 },
			{ @"sjuttio", 70 },
			{ @"åttio", 80 },
			{ @"nittio", 90 },
			{ @"hundra", 100 },
			{ @"tusen", 1000 },
			{ @"miljon", 1000000 },
			{ @"miljoner", 1000000 },
			{ @"miljard", 1000000000 },
			{ @"miljarder", 1000000000 },
			{ @"biljarder", 1000000000000 },
			{ @"biljard", 1000000000000 }
		};
		public static readonly Dictionary<string, long> OrdinalNumberMap = new Dictionary<string, long>
		{
			{ @"första", 1 },
			{ @"förste", 1 },
			{ @"etta", 1 },
			{ @"ettan", 1 },
			{ @"andra", 2 },
			{ @"andre", 2 },
			{ @"tvåa", 2 },
			{ @"tvåan", 2 },
			{ @"halva", 2 },
			{ @"tredje", 3 },
			{ @"fjärde", 4 },
			{ @"kvart", 4 },
			{ @"femte", 5 },
			{ @"sjätte", 6 },
			{ @"sjunde", 7 },
			{ @"åttonde", 8 },
			{ @"nionde", 9 },
			{ @"tionde", 10 },
			{ @"elfte", 11 },
			{ @"tolfte", 12 },
			{ @"trettonde", 13 },
			{ @"fjortonde", 14 },
			{ @"femtonde", 15 },
			{ @"sextonde", 16 },
			{ @"sjuttonde", 17 },
			{ @"artonde", 18 },
			{ @"nittonde", 19 },
			{ @"tjugonde", 20 },
			{ @"trettionde", 30 },
			{ @"fyrtionde", 40 },
			{ @"femtionde", 50 },
			{ @"sextionde", 60 },
			{ @"sjuttionde", 70 },
			{ @"åttionde", 80 },
			{ @"nittionde", 90 },
			{ @"hundrade", 100 },
			{ @"tusende", 1000 },
			{ @"miljonte", 1000000 },
			{ @"miljardte", 1000000000 },
			{ @"biljardte", 1000000000000 },
			{ @"halvor", 2 },
			{ @"tredjedelar", 3 },
			{ @"fjärdedelar", 4 },
			{ @"kvartar", 4 },
			{ @"femtedelar", 5 },
			{ @"sjättedelar", 6 },
			{ @"sjundedelar", 7 },
			{ @"åttondelar", 8 },
			{ @"niondelar", 9 },
			{ @"tiondelar", 10 },
			{ @"elftedelar", 11 },
			{ @"tolftedelar", 12 },
			{ @"trettondelar", 13 },
			{ @"fjortondelar", 14 },
			{ @"femtondelar", 15 },
			{ @"sextondelar", 16 },
			{ @"sjuttondelar", 17 },
			{ @"artondelar", 18 },
			{ @"nittondelar", 19 },
			{ @"tjugondelar", 20 },
			{ @"trettiondelar", 30 },
			{ @"fyrtiondelar", 40 },
			{ @"femtiondelar", 50 },
			{ @"sextiondelar", 60 },
			{ @"sjuttiondelar", 70 },
			{ @"åttiondelar", 80 },
			{ @"nittiondelar", 90 },
			{ @"hundradelar", 100 },
			{ @"tusendelar", 1000 },
			{ @"miljondelar", 1000000 },
			{ @"miljarddelar", 1000000000 },
			{ @"biljarddelar", 1000000000000 }
		};
		public static readonly Dictionary<string, long> RoundNumberMap = new Dictionary<string, long>
		{
			{ @"hundra", 100 },
			{ @"tusen", 1000 },
			{ @"miljon", 1000000 },
			{ @"miljard", 1000000000 },
			{ @"biljard", 1000000000000 },
			{ @"hundrade", 100 },
			{ @"tusende", 1000 },
			{ @"miljonte", 1000000 },
			{ @"miljardte", 1000000000 },
			{ @"biljardte", 1000000000000 },
			{ @"hundratals", 100 },
			{ @"tusentals", 1000 },
			{ @"miljontals", 1000000 },
			{ @"miljardtals", 1000000000 },
			{ @"biljardtals", 1000000000000 },
			{ @"dussin", 12 },
			{ @"dussintals", 12 },
			{ @"k", 1000 },
			{ @"m", 1000000 },
			{ @"g", 1000000000 },
			{ @"b", 1000000000 },
			{ @"t", 1000000000000 }
		};
		public static readonly Dictionary<string, string> AmbiguityFiltersDict = new Dictionary<string, string>
		{
			{ @"\ben\b", @"\b(en)\s+(en)\b" }
		};
		public static readonly Dictionary<string, string> RelativeReferenceMap = new Dictionary<string, string>
		{
			{ @"sist", @"N" },
			{ @"sista", @"N" },
			{ @"siste", @"N" },
			{ @"nästa", @"CURR+1" },
			{ @"näste", @"CURR+1" },
			{ @"föregående", @"CURR-1" },
			{ @"andra från slutet", @"N-1" },
			{ @"andre från slutet", @"N-1" },
			{ @"näst sista", @"N-1" },
			{ @"näst siste", @"N-1" }
		};
	}
}