---
LangMarker: Ita
#Integer Regex
DigitsNumberRegex: !simpleRegex
  def: \d|\d{1,3}(\.\d{3})
RoundNumberIntegerRegex: !simpleRegex
  def: (milion[ei]?|miliard[oi]?|bilion[ei]?|trilion[ei]?)
ZeroToNineIntegerRegex: !simpleRegex
  def: (un[oa]?|due?|tre?|quattro?|cinque?|sei|sette?|otto?|nove?|zero)
TenToNineteenIntegerRegex: !simpleRegex
  def: (diciassette?|tredici?|quattordici?|diciotto?|diciannove?|quindici?|sedici?|undici?|dodici?|dieci?)
TensNumberIntegerRegex: !simpleRegex
  def: (settanta?|venti?|trenta?|ottanta?|novanta?|quaranta?|cinquanta?|sessanta?)
HundredsNumberIntegerRegex: !nestedRegex #100,200,300,...900
  def: ({ZeroToNineIntegerRegex}?cento?)
  references: [ ZeroToNineIntegerRegex, TensNumberIntegerRegex ]
BelowHundredsRegex: !nestedRegex #0,1,2,...10,11,12,...,20,21,22,...,98,99
  def: ({ZeroToNineIntegerRegex}|{TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}({ZeroToNineIntegerRegex})?))
  references: [ ZeroToNineIntegerRegex, TenToNineteenIntegerRegex, TensNumberIntegerRegex]
BelowThousandsRegex: !nestedRegex #100,101,102,...210,211,212,...998,999
  def: ({HundredsNumberIntegerRegex}{BelowHundredsRegex}?)
  references: [ HundredsNumberIntegerRegex, BelowHundredsRegex]
BelowThousandsTotRegex: !nestedRegex #0,1,2,...,998,999
  def: ({BelowHundredsRegex}|{BelowThousandsRegex})
  references: [ BelowThousandsRegex, BelowHundredsRegex]
BelowMillionsRegex: !nestedRegex #1000,1001,...999.998,999.999
  def: ((({BelowHundredsRegex}|{BelowThousandsRegex})mila)|mille)((\s+e\s+)?({BelowHundredsRegex}|{BelowThousandsRegex}))?
  references: [ BelowHundredsRegex, BelowThousandsRegex]
BelowMillionsTotRegex: !nestedRegex #0,1,2,...999.998,999.999
  def: ({BelowHundredsRegex}|{BelowThousandsRegex}|{BelowMillionsRegex})
  references: [ BelowHundredsRegex, BelowThousandsRegex, BelowMillionsRegex]
NegativeNumberTermsRegex: !simpleRegex
  def: (meno\s+)
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}.*
  references: [ NegativeNumberTermsRegex ]
SeparaIntRegex: !nestedRegex #0,1,...,1.000.000,2.000.000,...,999.999.000.000,...,
  def: ({BelowMillionsTotRegex}(\s+{RoundNumberIntegerRegex}(\s+di\s+{RoundNumberIntegerRegex})*))
  references: [ BelowMillionsTotRegex, RoundNumberIntegerRegex ]
AllIntRegex: !nestedRegex #0,1,...999.999.999.999,....
  def: ({BelowMillionsTotRegex}|({SeparaIntRegex}(\s+(e\s+)?{SeparaIntRegex})*(\s+(e\s+)?{BelowMillionsTotRegex})?))
  references: [ SeparaIntRegex, BelowMillionsTotRegex ]
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+(?!(,\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !nestedRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)({DigitsNumberRegex})+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ DigitsNumberRegex, RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dozzin[ae](?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((mezza|una)\s+dozzina)|({AllIntRegex}\s+dozzin[ae]))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
SimpleRoundOrdinalRegex: !simpleRegex
  def: (millesim[oaie]|milionesim[oaie]|miliardesim[oaie]|bilionesim[oaie]|trilionesim[oaie])
OneToNineOrdinalRegex: !simpleRegex
  def: (prim[oaie]|secondo[oaie]|terz[oaie]|quart[oaie]|quint[oaie]|sest[oaie]|settim[oaie]|ottav[oaie]|non[oaie])
TensOrdinalRegex: !simpleRegex
  def: (|decim[oaie]|undicesim[oaie]|dodicesim[oaie]|tredicesim[oaie]|quattordicesim[oaie]|quindicesim[oaie]|sedicesim[oaie]|diciassettesim[oaie]|diciottesim[oaie]|diciannovesim[oaie]|ventesim[oaie]|trentesim[oaie]|quarantesim[oaie]|cinquantesim[oaie]|sessantesim[oaie]|settantesim[oaie]|ottantesim[oaie]|novantesim[oaie])
HundredOrdinalRegex: !nestedRegex #100°,200°,...900°
  def: ({ZeroToNineIntegerRegex}?(centesim[oaie]\s)) 
  references: [ ZeroToNineIntegerRegex ]
UnderHundredOrdinalRegex: !nestedRegex #1°,2°,...10°,11°,...98°,99°
  def: (({OneToNineOrdinalRegex}|{TensOrdinalRegex}|{TensNumberIntegerRegex}{ZeroToNineIntegerRegex}esim[oaie]))
  references: [ OneToNineOrdinalRegex, ZeroToNineIntegerRegex, TensNumberIntegerRegex, TensOrdinalRegex ]
UnderThousandOrdinalRegex: !nestedRegex #1°,2°,...998°,999
  def: ({UnderHundredOrdinalRegex}|{HundredOrdinalRegex}|{HundredsNumberIntegerRegex}{UnderHundredOrdinalRegex})
  references: [ HundredOrdinalRegex, UnderHundredOrdinalRegex, HundredsNumberIntegerRegex ]
OverThousandOrdinalRegex: !nestedRegex
  def: ({AllIntRegex}esim[oaie])
  references: [ AllIntRegex ]
ComplexOrdinalRegex: !nestedRegex
  def: ({UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})
  references: [ OverThousandOrdinalRegex, UnderThousandOrdinalRegex ]
SuffixOrdinalRegex: !nestedRegex
  def: (({BelowThousandsTotRegex})({SimpleRoundOrdinalRegex}))
  references: [ BelowThousandsTotRegex, SimpleRoundOrdinalRegex ]
#ComplexRoundOrdinalRegex: !nestedRegex
#  def: ((({SuffixOrdinalRegex}(\s)?)?{ComplexOrdinalRegex})|{SuffixOrdinalRegex})
#  references: [ SuffixOrdinalRegex, ComplexOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: ({ComplexOrdinalRegex})
  references: [ ComplexOrdinalRegex ]
#  def: ({ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex})
#  references: [ ComplexOrdinalRegex, SimpleRoundOrdinalRegex, ComplexRoundOrdinalRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)((\d*(1°|2°|3°|4°|5°|6°|7°|8°|9°|0°))|(11°|12°))(?=\b)
OrdinalItalianRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionNotationRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+[/]\d+(?=(\b[^/]|$))
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(e\s+)?)?({AllIntRegex})(\s+|\s*-\s*)(({AllOrdinalRegex})|mezz[oi])(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex]
FractionNounWithArticleRegex: !nestedRegex
  def: ({FractionNounRegex})
  references: [ FractionNounRegex ]
FractionPrepositionRegex: !nestedRegex
  def: (?<=\b)(?<numerator>({AllIntRegex})|((?<!\.)\d+))\s+su\s+(?<denominator>({AllIntRegex})|(\d+)(?!\.))(?=\b)
  references: [ AllIntRegex ]
#Double Regex
AllPointRegex: !nestedRegex
  def:  ((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))
  references: [ ZeroToNineIntegerRegex, SeparaIntRegex ]
AllFloatRegex: !nestedRegex
  def: ({AllIntRegex}(\s+(virgola|punto)){AllPointRegex})
  references: [ AllIntRegex, AllPointRegex ]
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))\d+,\d+(?!(,\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+)),\d+(?!(,\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithMultiplierRegex: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\,)))\d+,\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+,)))(\d+(,\d+)?)\^([+-]*[1-9]\d*)(?=\b)
#Percentage Regex
NumberWithSuffixPercentage: !nestedRegex
  def: ({BaseNumbers.NumberReplaceToken})(\s*)(%|percento|per cento|percentuale)
  references: [ BaseNumbers.NumberReplaceToken ]
NumberWithPrefixPercentage: !nestedRegex
  def: (percento di|per cento di)(\s*)({BaseNumbers.NumberReplaceToken})
  references: [ BaseNumbers.NumberReplaceToken ]
#Parser
DecimalSeparatorChar: !char ','
FractionMarkerToken: su
NonDecimalSeparatorChar: !char '.'
HalfADozenText: sei
WordSeparatorToken: e
WrittenDecimalSeparatorTexts: [virgola]
WrittenGroupSeparatorTexts: [punto]
WrittenIntegerSeparatorTexts: [e, '-']
WrittenFractionSeparatorTexts: [e, su]
HalfADozenRegex: !simpleRegex
  def: mezza\s+dozzina
DigitalNumberRegex: !nestedRegex
  def: ((?<=\b)(cento|mille|milione|milioni|miliardo|miliardi|trilione|trilioni|dozzina|dozzine)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    zero: 0
    un: 1
    una: 1
    uno: 1
    due: 2
    tre: 3
    quattro: 4
    cinque: 5
    sei: 6
    sette: 7
    otto: 8
    nove: 9
    dieci: 10
    undici: 11
    dodici: 12
    dozzina: 12
    dozzine: 12
    tredici: 13
    quattordici: 14
    quindici: 15
    sedici: 16
    diciassette: 17
    diciotto: 18
    diciannove: 19
    venti: 20
    trenta: 30
    quaranta: 40
    cinquanta: 50
    sessanta: 60
    settanta: 70
    ottanta: 80
    novanta: 90
    cento: 100
    mille: 1000
    un milione: 1000000
    milione: 1000000
    milioni: 1000000
    un miliardo: 1000000000
    miliardo: 1000000000
    miliardi: 1000000000
    un bilione: 1000000000000
    bilione: 1000000000000
    bilioni: 1000000000000
    un trilione: 1000000000000000000
    trilione: 1000000000000000000
    trilioni: 1000000000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    primo: 1
    prima: 1
    secondo: 2
    seconda: 2
    metà: 2
    terzo: 3
    terza: 3
    quarto: 4
    quarta: 4
    quinto: 5
    quinta: 5
    sesto: 6
    sesta: 6
    settimo: 7
    settima: 7
    ottavo: 8
    ottava: 8
    nono: 9
    nona: 9
    decimo: 10
    decima: 10
    undicesimo: 11
    undicesima: 11
    dodicesimo: 12
    dodicesima: 12
    tredicesimo: 13
    tredicesima: 13
    quattordicesimo: 14
    quattordicesima: 14
    quindicisimo: 15
    quindicisima: 15
    sedicesimo: 16
    sedicesima: 16
    diciassettesimo: 17
    diciassettesima: 17
    diciottesimo: 18
    diciottesima: 18
    diciannovesimo: 19
    diciannovesima: 19
    ventesimo: 20
    ventesima: 20
    ventunesimo: 21
    ventunesima: 21
    trentesimo: 30
    trentesima: 30
    quarantesimo: 40
    quarantesima: 40
    cinquantesimo: 50
    cinquantesima: 50
    sessantesimo: 60
    sessantesima: 60
    settantesimo: 70
    settantesima: 70
    ottantesimo: 80
    ottantesima: 80
    novantesimo: 90
    novantesima: 90
    centesimo: 100
    centesima: 100
    millesimo: 1000
    millesima: 1000
    milionesimo: 1000000
    milionesima: 1000000
    miliardesimo: 1000000000
    miliardesima: 1000000000
    bilionesimo: 1000000000000
    bilionesima: 1000000000000
    trilionesimo: 1000000000000000000
    trilionesima: 1000000000000000000
    primi: 1
    prime: 1
    secondi: 2
    seconde: 2
    terzi: 3
    terze: 3
    quarti: 4
    quarte: 4
    quinti: 5
    quinte: 5
    sesti: 6
    seste: 6
    settimi: 7
    settime: 7
    ottavi: 8
    ottave: 8
    noni: 9
    none: 9
    decimi: 10
    decime: 10
    undicesimi: 11
    undicesime: 11
    dodicesimi: 12
    dodicesime: 12
    tredicesimi: 13
    tredicesime: 13
    quattordicesimi: 14
    quattordicesime: 14
    quindicesimi: 15
    quindicesime: 15
    sedicesimi: 16
    sedicesime: 16
    diciassettesimi: 17
    diciassettesime: 17
    diciottesimi: 18
    diciottesime: 18
    diciannovesimi: 19
    diciannovesime: 19
    ventesimi: 20
    ventesime: 20
    trentesimi: 30
    trentesime: 30
    quarantesimi: 40
    quarantesime: 40
    cinquantesimi: 50
    cinquantesime: 50
    sessantesimi: 60
    sessantesime: 60
    settantesimi: 70
    settantesime: 70
    ottantesimi: 80
    ottantesime: 80
    novantesimi: 90
    novantesime: 90
    centesimi: 100
    centesime: 100
    millesimi: 1000
    millesime: 1000
    milionesimi: 1000000
    milionesime: 1000000
    miliardersimi: 1000000000
    miliardersime: 1000000000
    bilionesimi: 1000000000000
    bilionesime: 1000000000000
    trilionesimi: 1000000000000000000
    trilionesime: 1000000000000000000
PrefixCardinalMap: !dictionary
  types: [ string, long ]
  entries:
    due: 2 
    tre: 3 
    quattro: 4 
    cinque: 5 
    sei: 6 
    sette: 7 
    otto: 8 
    nove: 9 
    dieci: 10 
    undici: 11 
    dodici: 12 
    tredici: 13
    quattordici: 14
    quindici: 15
    sedici: 16
    diciassette: 17
    diciotto: 18
    diciannove: 19
    venti: 20
    ventuno: 21 
    ventidue: 22
    ventitre: 23 
    ventiquattro: 24
    venticinque: 25 
    ventisei: 26
    ventisette: 27 
    ventotto: 28 
    ventinove: 29 
    trenta: 30
    trentuno: 31
    quaranta: 40
    cinquanta: 50
    sessanta: 60
    settanta: 70
    ottanta: 80
    novanta: 90
    cento: 100 
    due cento: 200
    duecento: 200
    tre cento: 300
    trecento: 300
    quattro cento: 400
    quattrocento: 400
    cinque cento: 500
    cinquecento: 500
    sei cento: 600
    seicento: 600
    sette cento: 700
    settecento: 700
    otto cento: 800
    ottocento: 800
    nove cento: 900
    novecento: 900
SuffixOrdinalMap: !dictionary
  types: [ string, long ]
  entries:
    mille: 1000 
    milione: 1000000 
    miliardo: 1000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    cento: 100
    mille: 1000
    milione: 1000000
    milioni: 1000000
    miliardo: 1000000000
    miliardi: 1000000000
    bilione: 1000000000000
    bilioni: 1000000000000
    trilione: 1000000000000000000
    trilioni: 1000000000000000000
    centinaio: 100
    centinai: 100
    centinaie: 100
    millesimo: 1000
    milionesimo: 1000000
    miliardersimo: 1000000000
    bilionesimo: 1000000000000
    trilionesimo: 1000000000000000000
    millesima: 1000
    milionesima: 1000000
    miliardersima: 1000000000
    bilionesima: 1000000000000
    trilionesima: 1000000000000000000
    millesimi: 1000
    milionesimi: 1000000
    miliardersimi: 1000000000
    bilionesimi: 1000000000000
    trilionesimi: 1000000000000000000
    millesime: 1000
    milionesime: 1000000
    miliardersime: 1000000000
    bilionesime: 1000000000000
    trilionesime: 1000000000000000000
    centinaia: 100
    migliaia: 1000
    milionata: 1000000
    miliardata: 1000000000
    bilionata: 1000000000000
    trilionata: 1000000000000000000
    dozzina: 12
    dozzine: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
RelativeReferenceMap: !dictionary
  types: [ string, string ]
  entries:
    ultimo: N
    ultima: N
    ultimi: N
    ultime: N
    successivo: CURR+1
    successiva: CURR+1
    successivi: CURR+1
    successive: CURR+1
    prossimoo: CURR+1
    prossimoa: CURR+1
    prossimoi: CURR+1
    prossimoe: CURR+1
    seguente: CURR+1
    seguenti: CURR+1
    precedente: CURR-1
    precedenti: CURR-1
    penultimo: N-1
    penultima: N-1
    penultimi: N-1
    penultime: N-1
    terzultimo: N-2
    terzultima: N-2
    terzultimi: N-2
    terzultime: N-2
    quartultimo: N-3
    quartultima: N-3
    quartultimi: N-3
    quartultime: N-3
...