---
LangMarker: Swe
#Integer Regex
RoundNumberIntegerRegex: !simpleRegex
  def: (hundra|tusen|miljon|miljard|biljon)
ZeroToNineIntegerRegex: !simpleRegex
  def: (tre|sju|åtta|fyra|fem|noll|nio|ett|två|sex)
NegativeNumberTermsRegex: !simpleRegex
  def: ((minus|negativ)\s+)
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}.*
  references: [ NegativeNumberTermsRegex ]
AnIntRegex: !simpleRegex
  def: (en|ett)(?=\s)
TenToNineteenIntegerRegex: !simpleRegex
  def: (sjutton|tretton|fjorton|arton|nitton|femton|sexton|elva|tolv|tio)
TensNumberIntegerRegex: !simpleRegex
  def: (sjuttio|tjugo|trettio|åttio|nittio|fyrtio|femtio|sextio)
SeparaIntRegex: !nestedRegex
  def: ((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(and\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\s+{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\s+{RoundNumberIntegerRegex})+))
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, RoundNumberIntegerRegex, AnIntRegex ]
AllIntRegex: !nestedRegex
  def: (((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\s+(and\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(and\s+)?)*{SeparaIntRegex})
  references: [ TenToNineteenIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, SeparaIntRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!([\.,]\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+\s+dussin?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((halvt\s+)?a\s+dussin)|({AllIntRegex}\s+dussin?))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
RoundNumberOrdinalRegex: !simpleRegex
  def: (hundrade|tusende|miljonte|miljardte|biljonte)
NumberOrdinalRegex: !simpleRegex
  def: (först(e|a)|andrr(a|e)|tredje|fjärde|femte|sjätte|sjunde|åttonde|nionde|tionde|elfte|tolfte|trettonde|fjortonde|femtonde|sextonde|sjuttonde|artonde|nittonde|tjugonde|trettionde|fyrtionde|femtionde|sextionde|sjuttionde|åttionde|nittionde)
RelativeOrdinalRegex: !simpleRegex
  def: ((näst(a|e)|föregående)|näst sist(a|e)|sist(a|e))
BasicOrdinalRegex: !nestedRegex
  def: ({NumberOrdinalRegex}|{RelativeOrdinalRegex})
  references: [ NumberOrdinalRegex, RelativeOrdinalRegex ]
SuffixBasicOrdinalRegex: !nestedRegex
  def: ((((({TensNumberIntegerRegex}(\s+(och\s+)?|\s*-\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\s+{RoundNumberIntegerRegex})+)\s+(och\s+)?)*({TensNumberIntegerRegex}(\s+|\s*-\s*))?{BasicOrdinalRegex})
  references: [ TensNumberIntegerRegex, ZeroToNineIntegerRegex, AnIntRegex, RoundNumberIntegerRegex, BasicOrdinalRegex ]
SuffixRoundNumberOrdinalRegex: !nestedRegex
  def: (({AllIntRegex}\s+){RoundNumberOrdinalRegex})
  references: [ AllIntRegex, RoundNumberOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: ({SuffixBasicOrdinalRegex}|{SuffixRoundNumberOrdinalRegex})
  references: [ SuffixBasicOrdinalRegex, SuffixRoundNumberOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)((\d*(1:(e|a)|2:(a|e)|3:e|4:e|5:e|6:e|7:e|8:e|9:e|0:e))|(11:e|12:e))(?=\b)
OrdinalNumericRegex: !simpleRegex
  def: (?<=\b)(\d{1,3}(\s*,\s*\d{3})*\s*(:(e|a)))(?=\b)
OrdinalRoundNumberRegex: !nestedRegex
  def: (?<!(en|ett)\s+){RoundNumberOrdinalRegex}
  references: [ RoundNumberOrdinalRegex ]
OrdinalSwedishRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionNotationRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<![/-])(?<=\b))\d+[/]\d+(?=(\b[^/]|$))
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(och\s+)?)?({AllIntRegex})(\s+|\s*-\s*)((({AllOrdinalRegex})|({RoundNumberOrdinalRegex}))|halvor|kvartar)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, RoundNumberOrdinalRegex ]
FractionNounWithArticleRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+(och\s+)?)?(en|ett)(\s+|\s*-\s*)(?!\bförsta\b|\bandra\b)(({AllOrdinalRegex})|({RoundNumberOrdinalRegex})|halvan|kvarten)(?=\b)
  references: [ AllIntRegex, AllOrdinalRegex, RoundNumberOrdinalRegex ]
FractionPrepositionRegex: !nestedRegex
  def: (?<=\b)(?<numerator>({AllIntRegex})|((?<![\.,])\d+))\s+(över|i|ut\s+av)\s+(?<denominator>({AllIntRegex})|(\d+)(?![\.,]))(?=\b)
  references: [ AllIntRegex ]
FractionPrepositionWithinPercentModeRegex: !nestedRegex
  def: (?<=\b)(?<numerator>({AllIntRegex})|((?<![\.,])\d+))\s+över\s+(?<denominator>({AllIntRegex})|(\d+)(?![\.,]))(?=\b)
  references: [ AllIntRegex ]
#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{SeparaIntRegex}))
  references: [ ZeroToNineIntegerRegex, SeparaIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+komma){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleWithMultiplierRegex: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)\^([+-]*[1-9]\d*)(?=\b)
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+))[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
ConnectorRegex: !simpleRegex
    def: (?<spacer>och)
#Percentage Regex
NumberWithSuffixPercentage: !nestedRegex
  def: (?<!%)({BaseNumbers.NumberReplaceToken})(\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(procent|proc|procentandel)\b)
  references: [ BaseNumbers.NumberReplaceToken ]
FractionNumberWithSuffixPercentage: !nestedRegex
  def: (({BaseNumbers.FractionNumberReplaceToken})\s+av)
  references: [ BaseNumbers.FractionNumberReplaceToken ]
NumberWithPrefixPercentage: !nestedRegex
  def: (procent av|proc av)(\s*)({BaseNumbers.NumberReplaceToken})
  references: [ BaseNumbers.NumberReplaceToken ]
NumberWithPrepositionPercentage: !nestedRegex
  def: ({BaseNumbers.NumberReplaceToken})\s*(i|ut\s+av)\s*({BaseNumbers.NumberReplaceToken})
  references: [ BaseNumbers.NumberReplaceToken ]
#NumberRange Regex
TillRegex: !simpleRegex
  def: (till|--|-|—|——|~|–)
MoreRegex: !simpleRegex
  def: ((större|fler|mer|högre|större)(\s+än)?|ovanför|över|(?<!<|=)>)
LessRegex: !simpleRegex
  def: ((mindre|färre|lägre)(\s+än)?|under|(?<!>|=)<)
EqualRegex: !simpleRegex
  def: (lik(nar|nande)?(\s+(som))?|(?<!<|>)=)
MoreOrEqualPrefix: !nestedRegex
  def: (((ej|inte)\s+{LessRegex})|(åtminstone))
  references: [ LessRegex ]
MoreOrEqual: !nestedRegex
  def: (({MoreRegex}\s+(eller)?\s+{EqualRegex})|({EqualRegex}\s+(eller)?\s+{MoreRegex})|{MoreOrEqualPrefix}(\s+(eller)?\s+{EqualRegex})?|({EqualRegex}\s+(eller)?\s+)?{MoreOrEqualPrefix}|>\s*=)
  references: [ MoreRegex, EqualRegex, LessRegex, MoreOrEqualPrefix ]
MoreOrEqualSuffix: !simpleRegex
  def: ((och|eller)\s+(större|fler|mer|högre)((?!\s+än)|(\s+än(?!(\s*\d+)))))
LessOrEqualPrefix: !nestedRegex
  def: (((ej|inte)\s+{MoreRegex})|(som\s+mest))
  references: [ MoreRegex ]
LessOrEqual: !nestedRegex
  def: (({LessRegex}\s+(eller)?\s+{EqualRegex})|({EqualRegex}\s+(eller)?\s+{LessRegex})|{LessOrEqualPrefix}(\s+(eller)?\s+{EqualRegex})?|({EqualRegex}\s+(eller)?\s+)?{LessOrEqualPrefix}|<\s*=)
  references: [ LessRegex, EqualRegex, MoreRegex, LessOrEqualPrefix ]
LessOrEqualSuffix: !simpleRegex
  def: ((och|eller)\s+(mindre|färre|lägre)((?!\s+än)|(\s+än(?!(\s*\d+)))))
NumberSplitMark: !simpleRegex
  def: (?![,.](?!\d+))
MoreRegexNoNumberSucceed: !simpleRegex
  def: ((större|fler|mer|högre)((?!\s+än)|\s+(än(?!(\s*\d+))))|(ovanför|över)(?!(\s*\d+)))
LessRegexNoNumberSucceed: !simpleRegex
  def: ((mindre|färre|lägre)((?!\s+än)|\s+(än(?!(\s*\d+))))|(nedanför|under)(?!(\s*\d+)))
EqualRegexNoNumberSucceed: !simpleRegex
  def: (lik(nar|nande)?((?!\s+(som))|(\s+(som)(?!(\s*\d+)))))
OneNumberRangeMoreRegex1: !nestedRegex
  def: ({MoreOrEqual}|{MoreRegex})\s*(som\s+)?(?<number1>({NumberSplitMark}.)+)
  references: [ MoreOrEqual, MoreRegex, NumberSplitMark ]
OneNumberRangeMoreRegex2: !nestedRegex
  def: (?<number1>({NumberSplitMark}.)+)\s*{MoreOrEqualSuffix}
  references: [ MoreOrEqualSuffix, NumberSplitMark ]
OneNumberRangeMoreSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, MoreRegex, EqualRegexNoNumberSucceed, MoreRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeLessRegex1: !nestedRegex
  def: ({LessOrEqual}|{LessRegex})\s*(som\s+)?(?<number2>({NumberSplitMark}.)+)
  references: [ LessOrEqual, LessRegex, NumberSplitMark ]
OneNumberRangeLessRegex2: !nestedRegex
  def: (?<number2>({NumberSplitMark}.)+)\s*{LessOrEqualSuffix}
  references: [ LessOrEqualSuffix, NumberSplitMark ]
OneNumberRangeLessSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){LessRegexNoNumberSucceed})|({LessRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+eller\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, LessRegex, EqualRegexNoNumberSucceed, LessRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeEqualRegex: !nestedRegex
  def: '{EqualRegex}\s*(som\s+)?(?<number1>({NumberSplitMark}.)+)'
  references: [ EqualRegex, NumberSplitMark ]
TwoNumberRangeRegex1: !nestedRegex
  def: mellan\s*(?<number1>({NumberSplitMark}.)+)\s*och\s*(?<number2>({NumberSplitMark}.)+)
  references: [ NumberSplitMark ]
TwoNumberRangeRegex2: !nestedRegex
  def: ({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\s*(och|men|,)\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex3: !nestedRegex
  def: ({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\s*(och|men|,)\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex4: !nestedRegex
  def: (från\s+)?(?<number1>({NumberSplitMark}(?!\bfrån\b).)+)\s*{TillRegex}\s*(?<number2>({NumberSplitMark}.)+)
  references: [ TillRegex, NumberSplitMark ]
AmbiguousFractionConnectorsRegex: !simpleRegex
  def: (\bin\b)
# "in" is ambiguous for cases like "more than 30000 in 2009", other connector "out of", "over" is not ambiguous in English
#Parser

DecimalSeparatorChar: !char ','
FractionMarkerToken: av
NonDecimalSeparatorChar: !char '.'
HalfADozenText: sex
WordSeparatorToken: och
WrittenDecimalSeparatorTexts: [komma]
WrittenGroupSeparatorTexts: [punkt]
WrittenIntegerSeparatorTexts: [och]
WrittenFractionSeparatorTexts: [och]
HalfADozenRegex: !simpleRegex
  def: (ett\s+)?halvt\s+dussin
DigitalNumberRegex: !nestedRegex
  def: ((?<=\b)(hundra|tusen|miljon|miljard|biljard|dussin)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    ingen: 0
    inga: 0
    noll: 0
    en: 1
    ett: 1
    två: 2
    tre: 3
    fyra: 4
    fem: 5
    sex: 6
    sju: 7
    åtta: 8
    nio: 9
    tio: 10
    elva: 11
    tolv: 12
    dussin: 12
    dussintal: 12
    dussintals: 12
    tretton: 13
    fjorton: 14
    femton: 15
    sexton: 16
    sjutton: 17
    arton: 18
    nitton: 19
    tjugo: 20
    tjog: 20
    tjogvis: 20
    trettio: 30
    tretti: 30
    fyrtio: 40
    femtio: 50
    sextio: 60
    sjuttio: 70
    åttio: 80
    nittio: 90
    hundra: 100
    tusen: 1000
    miljon: 1000000
    miljard: 1000000000
    biljard: 1000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    första: 1
    förste: 1
    etta: 1
    ettan: 1
    andra: 2
    andre: 2
    tvåa: 2	
    tvåan: 2
    halva: 2
    tredje: 3
    fjärde: 4
    kvart: 4
    femte: 5
    sjätte: 6
    sjunde: 7
    åttonde: 8
    nionde: 9
    tionde: 10
    elfte: 11
    tolfte: 12
    trettonde: 13
    fjortonde: 14
    femtonde: 15
    sextonde: 16
    sjuttonde: 17
    artonde: 18
    nittonde: 19
    tjugonde: 20
    trettionde: 30
    fyrtionde: 40
    femtionde: 50
    sextionde: 60
    sjuttionde: 70
    åttionde: 80
    nittionde: 90
    hundrade: 100
    tusende: 1000
    miljonte: 1000000
    miljardte: 1000000000
    biljardte: 1000000000000
    halvor: 2
    tredjedelar: 3
    fjärdedelar: 4
    kvartar: 4
    femtedelar: 5
    sjättedelar: 6
    sjundedelar: 7
    åttondelar: 8
    niondelar: 9
    tiondelar: 10
    elftedelar: 11
    tolftedelar: 12
    trettondelar: 13
    fjortondelar: 14
    femtondelar: 15
    sextondelar: 16
    sjuttondelar: 17
    artondelar: 18
    nittondelar: 19
    tjugondelar: 20
    trettiondelar: 30
    fyrtiondelar: 40
    femtiondelar: 50
    sextiondelar: 60
    sjuttiondelar: 70
    åttiondelar: 80
    nittiondelar: 90
    hundradelar: 100
    tusendelar: 1000
    miljondelar: 1000000
    miljarddelar: 1000000000
    biljarddelar: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    hundra: 100
    tusen: 1000
    miljon: 1000000
    miljard: 1000000000
    biljard: 1000000000000
    hundrade: 100
    tusende: 1000
    miljonte: 1000000
    miljardte: 1000000000
    biljardte: 1000000000000
    hundratals: 100
    tusentals: 1000
    miljontals: 1000000
    miljardtals: 1000000000
    biljardtals: 1000000000000
    dussin: 12
    dussintals: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
AmbiguityFiltersDict: !dictionary
  types: [ string, string ]
  entries:
    '\ben\b': '\b(en)\s+(en)\b'
RelativeReferenceMap: !dictionary
  types: [ string, string ]
  entries:
    sist: N
    sista: N
    siste: N
    nästa: CURR+1
    näste: CURR+1
    föregående: CURR-1
    andra från slutet: N-1
    andre från slutet: N-1
    näst sista: N-1
    näst siste: N-1
...